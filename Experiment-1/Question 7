Jump Game II
Solved
Medium
Topics
Companies
You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

Code:-

#include <iostream>
#include <vector>
#include <algorithm> // For std::max
using namespace std;

class Solution {
public:
    int jump(vector<int>& nums) {
        int jumps = 0;
        int sec = 0;
        int currInd = 0;

        for (int i = 0; i < nums.size() - 1; i++) {
            sec = max(sec, i + nums[i]); // Find the farthest index we can reach

            if (i == currInd) { // If we reach the end of the current jump range
                jumps++;
                currInd = sec;
            }
        }
        return jumps;
    }
};

int main() {
    Solution sol;
    vector<int> nums = {2, 3, 1, 1, 4}; // Example input

    int result = sol.jump(nums);
    cout << "Minimum jumps needed: " << result << endl;

    return 0;
}
